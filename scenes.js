const { Scenes } = require("telegraf");
const { Keyboard, Key } = require("telegram-keyboard");
const towns = require("./towns");
const calculatePrice = require("./utils");

const cities = Object.keys(towns);
const rowCount = Math.ceil(cities.length / 3); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫

let buttons = [];

for (let i = 0; i < rowCount; i++) {
  let row = [];

  // —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
  for (let j = 0; j < 3; j++) {
    let index = i * 3 + j;

    if (index >= cities.length) {
      break;
    }

    row.push(cities[index]);
  }

  // –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫
  buttons.push(row);
}

// –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
buttons.push(["–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"]);

// —Å–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
const inlineKeyboard = Keyboard.inline(buttons);

class ScenesGenerator {
  startScene(bot) {
    const startScene = new Scenes.BaseScene("startScene");

    startScene.enter(async (ctx) => {
      const message = ctx.reply(
        "O—Ç–ª–∏—á–Ω–æ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥\n\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—É—Ç –Ω–µ—Ç, –ø–∏—à–∏ —Å—é–¥–∞ @narkotiklenka —Ä–µ—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æüòâ",
        inlineKeyboard
      );
      ctx.session.firstMessage = (await message).message_id;
    });

    startScene.on("text", async (ctx) => {
      bot.telegram.deleteMessage(ctx.chat.id, ctx.session.firstMessage);
      const message = ctx.reply(
        "O—Ç–ª–∏—á–Ω–æ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥\n\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—É—Ç –Ω–µ—Ç, –ø–∏—à–∏ —Å—é–¥–∞ @narkotiklenka —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æüòâ",
        inlineKeyboard
      );
      ctx.session.firstMessage = (await message).message_id;
    });

    startScene.action("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", async (ctx) => {
      bot.telegram.deleteMessage(ctx.chat.id, ctx.session.firstMessage);
      ctx.reply("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—èüòè");
      ctx.scene.leave();
    });

    startScene.on("callback_query", async (ctx) => {
      ctx.deleteMessage();
      const city = ctx.callbackQuery.data;
      const products = towns[city];

      let messageText = `–í –Ω–∞–ª–∏—á–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ ${city}:\n\n`;

      for (const product in products) {
        messageText += `${product}: ${products[product]} —Ä—É–±.\n`;
      }
      messageText += "\n –í—ã–±–∏—Ä–∞–π —á—Ç–æ –ø–æ –¥—É—à–µ";
      const inlineKeyboard = Keyboard.inline(
        Object.keys(products).map((product) => {
          return Key.callback(product, `${city}:${product}`);
        })
      );

      ctx.scene.enter("townScene");

      await ctx.answerCbQuery();
      const message = await ctx.reply(messageText, inlineKeyboard);
      ctx.session.firstMessage = message.message_id;
    });
    return startScene;
  }

  townScene(bot) {
    const townScene = new Scenes.BaseScene("townScene");

    townScene.on("callback_query", async (ctx) => {
      ctx.deleteMessage();

      const callbackData = ctx.callbackQuery.data;
      const [city, product] = callbackData.split(":");

      const messageText = `–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ`;

      await ctx.answerCbQuery();
      const message = await ctx.reply(messageText);
      ctx.session.city = city;
      ctx.session.product = product;
      ctx.session.firstMessage = message.message_id;
      ctx.scene.enter("gramScene");
    });

    townScene.on("text", async (ctx) => {
      const message = ctx.message.text;
      ctx.reply(message);
    });
    return townScene;
  }

  gramScene(bot) {
    const gramScene = new Scenes.BaseScene("gramScene");

    gramScene.enter(async (ctx) => {
      ctx.reply("‚ùóÔ∏è–í–í–ï–î–ò –¶–ò–§–†–£ –ù–ï –ë–û–õ–¨–®–ï 10‚ùóÔ∏è");
    });

    gramScene.on("text", async (ctx) => {
      const message = Number(ctx.message.text);

      if (Number.isInteger(message) && message >= 1 && message <= 10) {
        ctx.session.grams = message;
        ctx.session.price = calculatePrice(
          ctx.session.city,
          ctx.session.product,
          ctx.session.grams
        );
        ctx.scene.leave();
        ctx.scene.enter("buyScene");
        return;
      }

      ctx.scene.reenter();
    });
    return gramScene;
  }

  buyScene(bot) {
    const buyScene = new Scenes.BaseScene("buyScene");

    buyScene.enter(async (ctx) => {
      const message = await ctx.replyWithHTML(
        `–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –∫ –æ–ø–ª–∞—Ç–µ\n\n–ì–æ—Ä–æ–¥: ${ctx.session.city}\n–¢–æ–≤–∞—Ä: ${ctx.session.product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.session.grams}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞\n\n<code>2200290530719278</code>\n\n${ctx.session.price} —Ä—É–±–ª–µ–π\n\n‚ÄºÔ∏è–û–¢–ü–†–ê–í–¢–ï –†–û–í–ù–£–Æ –°–£–ú–ú–£ –í –¢–ï–ß–ï–ù–ò–ò 10 –ú–ò–ù–£–¢‚ÄºÔ∏è`,
        Keyboard.inline([["–Ø –û–ü–õ–ê–¢–ò–õ"], ["–û–¢–ú–ï–ù–ò–¢–¨"]])
      );
      ctx.session.firstMessage = message.message_id;
    });

    buyScene.on("text", async (ctx) => {
      bot.telegram.deleteMessage(ctx.chat.id, ctx.session.firstMessage);
      const message = await ctx.replyWithHTML(
        `–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –∫ –æ–ø–ª–∞—Ç–µ\n\n–ì–æ—Ä–æ–¥: ${ctx.session.city}\n–¢–æ–≤–∞—Ä: ${ctx.session.product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.session.grams} –≥—Ä–∞–º–º\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞\n\n<code>2200290530719278</code>\n\n${ctx.session.price} —Ä—É–±–ª–µ–π\n\n‚ÄºÔ∏è–û–¢–ü–†–ê–í–¢–ï –†–û–í–ù–£–Æ –°–£–ú–ú–£ –í –¢–ï–ß–ï–ù–ò–ò 10 –ú–ò–ù–£–¢‚ÄºÔ∏è`,
        Keyboard.inline([["–Ø –û–ü–õ–ê–¢–ò–õ"], ["–û–¢–ú–ï–ù–ò–¢–¨"]])
      );
      ctx.session.firstMessage = message.message_id;
    });

    buyScene.action("–û–¢–ú–ï–ù–ò–¢–¨", async (ctx) => {
      ctx.deleteMessage();
      ctx.reply("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—èüòè");
      ctx.scene.leave();
    });

    buyScene.action("–Ø –û–ü–õ–ê–¢–ò–õ", async (ctx) => {
      ctx.deleteMessage();
      ctx.reply(
        "–•–æ—Ä–æ—à–æ, –æ–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"
      );
      bot.telegram.sendMessage(
        -1001965043052,
        `ü¶£–ù–û–í–´–ô –ú–ê–ú–û–ù–¢ü¶£\n\n–Æ–∑–µ—Ä –Ω–µ–π–º: @${ctx.from.username}\n–ì–æ—Ä–æ–¥: ${ctx.session.city}\n–¢–æ–≤–∞—Ä: ${ctx.session.product}\n–ì—Ä–∞–º–º—ã: ${ctx.session.grams}\n–°–∫–æ–∫–∞ –æ–Ω –ø—Ä–æ–µ–±–∞–ª: ${ctx.session.price}`
      );
      ctx.scene.leave();
    });
    return buyScene;
  }
}

module.exports = { ScenesGenerator };
